# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IchN1Uo6h9VbDDvLqf70szBAQNSVbQaZ
"""

!nvidia-smi

import keras
from keras.models import Sequential
from keras.datasets import cifar10
from keras.layers import Dense, Flatten
from keras.layers import Conv2D, MaxPooling2D,Dropout
import numpy as np
import matplotlib.pyplot as plt

(X_train, Y_train),(X_test, Y_test) = cifar10.load_data()

from keras.utils import np_utils
x_train = X_train.astype('float32')/255
x_test = X_test.astype('float32')/255
y_train = np_utils.to_categorical(Y_train)
y_test = np_utils.to_categorical(Y_test)

model = Sequential()

model.add(Conv2D(filters=64,kernel_size=(3,3),input_shape = (32,32,3),activation= 'relu',padding = 'same'))
model.add(Conv2D(filters=64,kernel_size=(3,3),activation= 'relu',padding = 'same'))
model.add(Conv2D(filters=64,kernel_size=(3,3),activation= 'relu',padding = 'same'))
model.add(MaxPooling2D(pool_size = (4,4)))
model.add(Flatten())
model.add(Dropout(0.4))
model.add(Dense(512,activation = 'relu'))
model.add(Dropout(0.4))
model.add(Dense(10,activation = 'softmax'))
print(model.summary())

def show_train_history(train_history):
  plt.plot(train_history.history['acc'])
  plt.plot(train_history.history['val_acc'])
  plt.xticks([i for i in range(0,len(train_history.history['acc']))])
  plt.title('Train History')
  plt.ylabel('acc')
  plt.xlabel('epoch')
  plt.legend(['train','test'],loc = 'upper left')
  plt.show()

def show_train_history02(train_history):
  plt.plot(train_history.history['loss'])
  plt.plot(train_history.history['val_loss'])
  plt.xticks([i for i in range(0,len(train_history.history['loss']))])
  plt.title('Train History')
  plt.ylabel('loss')
  plt.xlabel('epoch')
  plt.legend(['train','test'],loc = 'upper left')
  plt.show()

model.compile(loss='categorical_crossentropy', optimizer='SGD', metrics=['acc'])
history = model.fit(x_train, y_train, epochs=50, batch_size=64, verbose=1, validation_split=0.2,shuffle = True)
show_train_history(history)
show_train_history02(history)
score = model.evaluate(x_test,y_test,verbose = 2)
print('Test loss',score[0])
print('Test accuracy',score[1])